#!/bin/bash

list(){
    grep -E '^[[:space:]]*([[:alnum:]_]+[[:space:]]*\(\)|function[[:space:]]+[[:alnum:]_]+)' "$0" | tr -d '(){}'
}

kbase(){
    echo -en "\n New article for Docker kbase...\n"
    read -p "Clone the kbase? (y/n) :" CLONE
    read -p "Issue title: " ISSUETITLE 
    export ISSUETITLE
    if [ "$CLONE" = 'y' ]; then
        cd ~
        git clone git@github.com:docker/kbase.git
        cd kbase
    else
        cd ~/kbase
        git checkout master
        git pull
    fi

    git checkout -b "$ISSUETITLE"
    mkdir "$ISSUETITLE"
    cd "$ISSUETITLE"
    cp ../templates/error.md ./readme.md
    vim readme.md
    read -p "Ready to push to Github? (y/n) " PUSH
    if [ "$PUSH" = 'y' ]; then
        git add readme.md 
        git commit -m "initial commit"
        git push -u origin "$ISSUETITLE"
    else
        echo -en "\nTo continue editing:\n\$ISSUETITLE=${ISSUETITLE}\; git checkout -b "\$ISSUETITLE"\n"
    fi  
}

mvdl(){
  # cd into the last directory modified/created in pwd
   str=$(ls -lastr ~/Downloads | awk '{print $10}' | grep '^[0-9a-zA-Z]' | tail -1)
   mv -v ~/Downloads/${str} .
}


cdl(){
  # cd into the last directory modified/created in pwd
   str=$(ls -lastrd */ | awk '{print $10}' | grep '^[0-9a-zA-Z]' | tail -1)
   cd $str
}

tags(){
  repo=$1
  image=$2

  if [ "$repo" = "" -a "$image" = "" ]; then
     echo "Syntax: script <repo> <image>"
  elif [ "$repo" != "" -a "$image" = "" ]; then 
     repo=library
     image=$1
     echo Results for image: $image
     curl -L -s 'https://registry.hub.docker.com/v2/repositories/'$repo'/'$image'/tags?page_size=1024'|jq '."results"[]["name"]' 2> /dev/null 
  elif [ "$repo" != "" -a "$image" != "" ]; then
     curl -L -s 'https://registry.hub.docker.com/v2/repositories/'$repo'/'$image'/tags?page_size=1024'|jq '."results"[]["name"]' 2> /dev/null
  fi
}

lessp(){
	cat "$@" | source-highlight --out-format=esc -o STDOUT -s prolog | less -R
}

lessj(){
	cat "$@" | source-highlight --out-format=esc -o STDOUT -s json  | less -R
}

lessl(){
	cat "$@" | source-highlight --out-format=esc -o STDOUT -s syslog  | less -R
}

dtr-container-ip(){
for i in `ls -1 dtr-*`; do echo "**** $i ****"; cat $i | jq '.[] | .NetworkSettings.Networks' | jq '.[].IPAddress' | tr -d '"'; done
}

source <(kubectl completion bash)
source <(minikube completion bash)

parse-kube-describe-nodes(){
cat kube-describe-nodes.txt | sed -n "/Events:/,/Name:/p" | tr ',' '\n'
}

diver-ucp-login(){
		read -p 'UCP Host: ' HOST
	       	read -p 'UCP Port: ' PORT
	       	read -p 'UCP user: ' USER
	       	read -sp 'UCP pass: ' PASS
	       	~/go/bin/diver ucp login --ignorecert --username ${USER} --password ${PASS} --url https://${HOST}:${PORT}
		echo -ne 'Example Usage: \n'
		echo -ne 'diver ucp auth roles list\ndiver ucp auth roles get --rolename <role>\ndiver ucp auth roles create --rolename <rolename> --ruleset <rolename>.role\n'
}

diver-dtr-login(){
                read -p 'DTR Host: ' HOST
                read -p 'DTR Port: ' PORT
                read -p 'DTR user: ' USER
                read -sp 'DTR pass: ' PASS
                ~/go/bin/diver dtr login --ignorecert --username ${USER} --password ${PASS} --url https://${HOST}:${PORT}
		echo -ne '\nExample: diver dtr info replicas\n'
}

vless(){
	VLESS=$(find /usr/share/vim -name 'less.sh')
	if [ ! -z $VLESS ]; then
		$VLESS $1
	fi
}

sd_images(){
	#awk '/docker images/{f=1;next} /docker stats/{f=0;next;print} f' dsinfo.txt
	awk '/docker images/' RS= dsinfo.txt
}


sd_images_list(){
	 awk '/docker images/{f=1;next} /docker stats/{f=0;next;print} f' dsinfo.txt | awk '{print $1}' | grep -v -E '(REPOSITORY|~)' | sed '/^$/d'
	 #awk '/docker images/' RS= dsinfo.txt | awk '{print $1}' | grep -v -E '(REPOSITORY|~)' | sed '/^$/d'
}

sd_stats(){
	awk '/docker stats/' RS= dsinfo.txt
}

sd_container_ids(){
	awk '/docker stats/' RS= dsinfo.txt | awk 'x==1 {print $1} /CONTAINER/ {x=1}'
}

sd_engine(){
    awk '/docker version/{f=1;next} /docker info/{f=0;next;print} f' dsinfo.txt
    #awk '/docker version/' RS= dsinfo.txt
}

sd_docker_info(){
    awk '/docker info/{f=1;next} /docker images/{f=0;next;print} f' dsinfo.txt
}

sfcd ()
{
    if [ -z $SFORCE_USER ]; then
        casedir=~/cases/;
    else
        casedir=/host/sforce/attachments/cases/;
    fi;
    case_number=$(echo $1 | awk -F'/' '{print $NF}');
    if [ ! -d ${casedir}/$case_number ]; then
        mkdir ${casedir}/$case_number;
    fi;
    cd ${casedir}/$case_number;
    touch .;
    ls --color=auto
}

vssh(){
    tmux rename-window "$*" 2> /dev/null
    command ssh -i ~/.ssh/id_rsa.samson.priv vagrant@${1}
}

git-update-fork(){
    read -p "Your fork (git@github.com:YOUR-USERNAME/YOUR-FORKED-REPO.git): " FORK
    read -p "Original Upstream (git@github.com/ORIGINAL-DEV-USERNAME/REPO-YOU-FORKED-FROM.git): " ORIG
    ssh-add
    git clone $FORK
    cd $(echo $FORK | awk -F '/' '{print $2}' | sed 's/\(.*\).git/\1 /')
    git remote add upstream $ORIG
    git fetch upstream
    git pull upstream master
    git push
}

sanitize-file(){
    read -p "Name to remove from file: " NAME
    FILE=$(eval echo $1 | xargs basename)
    FILE_PATH=$(eval echo ${1})
    FILE_CLEAN=$(echo ${FILE}-sanitized | sed 's/^\.//')
    echo "Sanitizing ${FILE}"
    ## Just removes IPv4 addresses for now.
    cat $FILE_PATH | sed -r 's/(\b[0-9]{1,3}\.){3}[0-9]{1,3}\b'/SANITIZED-IP/ | sed "s/${NAME}/SANITIZED-USER/I" > ${FILE_CLEAN}
    echo -en "\nHere is the sanitized version: ${PWD}/${FILE_CLEAN}\n"
}

bytesToHuman() {
    b=${1:-0}; d=''; s=0; S=(Bytes {K,M,G,T,P,E,Z,Y}iB)
    while ((b > 1024)); do
        d="$(printf ".%02d" $((b % 1024 * 100 / 1024)))"
        b=$((b / 1024))
        let s++
    done
    echo "$b$d ${S[$s]}"
}

sd_container-by-status(){
    #This function is intended to parse `support.sh` output or recent `dsinfo.txt` output. 
      case "$1" in
        exited)
                  # "-d" or "--debug" parameter?
                  awk '/ccc Container/' RS= *.txt | awk '/"Status":"exited"/' RS="ccc Container"
                  echo -en "\nExited containers...\n"
                  ;;
        running)

                  awk '/ccc Container/' RS= *.txt | awk '/"Status":"running"/' RS="ccc Container"
                  echo -en "\nRunning containers...\n"
                  ;;
              "")
                  awk '/ccc Container/' RS= *.txt | awk '/"Status":"running"/' RS="ccc Container"
                  echo -en "\nUsed default 'running'...\n"
                  ;;
               *)
                  echo -en "\nSyntax:\n\nsd_container-by-status <exited-OR-running>\n\nAlso, make sure 'dsinfo.txt' or support.sh output is in the directory.\n\n"
                  ;;
      esac
}

aws-my-instances(){
    aws ec2 describe-instances --filters 'Name=tag:Name,Values=sshowers*' --query 'Reservations[*].Instances[*].[ImageId,Tags,InstanceId,InstanceType,KeyName,PublicDnsName,PublicIpAddress,State,SubnetId,VpcId,Architecture]' | tr -d '[]{} ' | grep -v ^$ | tr ',' ' '
}

terraform-vpc-instances(){
    VPC_ID=$(../terraform show | grep -A 1 aws_vpc.docker | tail -1 | awk '{print $NF}'); aws ec2 describe-instances --filters Name=vpc-id,Values=${VPC_ID}| jq '.Reservations[].Instances[] | [.LaunchTime, .State.Name, (.Tags[]|select(.Key=="Name")|.Value), .PublicDnsName, .PublicIpAddress]'
}


#alias unzipdir='for f in *.zip; do d=`basename $f .zip`; mkdir -p $d; (cd $d && unzip ../$f); done'

unzipdir(){
    for f in $@; do 
        pwd=$(pwd)
        d=$(basename $f .zip)
        mkdir -p $(date -I)/${d}
        cd $(date -I)/${d} && unzip ../../$f
        if [ $(ls -1 -d */ | wc -l) = 1 ]; then
           mv $(ls -1 -d */)/* . 
           rmdir $(ls -1 -d */)
        fi
        cd ${pwd}
    done
    cd $(ls -r -1 -d */ | tail -1)
}


ssh() {
    tmux rename-window "$*" 2> /dev/null
    command ssh "$@"
}

sforce() {
    tmux rename-window "sforce" 2> /dev/null
    bash ~/docker/sforce/run.sh
}

awssh(){
    tmux rename-window "$*" 2> /dev/null
    command ssh -i ~/Documents/AWS/sshowers-dev-testkit.pem "$@"
}

worklaptop-ssh() {
    tmux rename-window "worklaptop" 2> /dev/null
    command ssh -YC SANITIZED-USER@SANITIZED-IP
}

"$@"
